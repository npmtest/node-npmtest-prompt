{"/home/travis/build/npmtest/node-npmtest-prompt/test.js":"/* istanbul instrument in package npmtest_prompt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-prompt/lib.npmtest_prompt.js":"/* istanbul instrument in package npmtest_prompt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_prompt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_prompt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-prompt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-prompt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_prompt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_prompt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_prompt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_prompt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_prompt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_prompt.__dirname + '/lib.npmtest_prompt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-prompt/node_modules/prompt/lib/prompt.js":"/*\n * prompt.js: Simple prompt for prompting information from the command line\n *\n * (C) 2010, Nodejitsu Inc.\n *\n */\n\nvar events = require('events'),\n    readline = require('readline'),\n    utile = require('utile'),\n    async = utile.async,\n    read = require('read'),\n    validate = require('revalidator').validate,\n    winston = require('winston'),\n    colors = require('colors/safe');\n\n//\n// Monkey-punch readline.Interface to work-around\n// https://github.com/joyent/node/issues/3860\n//\nreadline.Interface.prototype.setPrompt = function(prompt, length) {\n  this._prompt = prompt;\n  if (length) {\n    this._promptLength = length;\n  } else {\n    var lines = prompt.split(/[\\r\\n]/);\n    var lastLine = lines[lines.length - 1];\n    this._promptLength = lastLine.replace(/\\u001b\\[(\\d+(;\\d+)*)?m/g, '').length;\n  }\n};\n\n//\n// Expose version using `pkginfo`\n//\nrequire('pkginfo')(module, 'version');\n\nvar stdin, stdout, history = [];\nvar prompt = module.exports = Object.create(events.EventEmitter.prototype);\nvar logger = prompt.logger = new winston.Logger({\n  transports: [new (winston.transports.Console)()]\n});\n\nprompt.started    = false;\nprompt.paused     = false;\nprompt.stopped    = true;\nprompt.allowEmpty = false;\nprompt.message    = 'prompt';\nprompt.delimiter  = ': ';\nprompt.colors     = true;\n\n//\n// Create an empty object for the properties\n// known to `prompt`\n//\nprompt.properties = {};\n\n//\n// Setup the default winston logger to use\n// the `cli` levels and colors.\n//\nlogger.cli();\n\n//\n// ### function start (options)\n// #### @options {Object} **Optional** Options to consume by prompt\n// Starts the prompt by listening to the appropriate events on `options.stdin`\n// and `options.stdout`. If no streams are supplied, then `process.stdin`\n// and `process.stdout` are used, respectively.\n//\nprompt.start = function (options) {\n  if (prompt.started) {\n    return;\n  }\n\n  options = options        || {};\n  stdin   = options.stdin  || process.stdin;\n  stdout  = options.stdout || process.stdout;\n\n  //\n  // By default: Remember the last `10` prompt property /\n  // answer pairs and don't allow empty responses globally.\n  //\n  prompt.memory     = options.memory     || 10;\n  prompt.allowEmpty = options.allowEmpty || false;\n  prompt.message    = options.message    || prompt.message;\n  prompt.delimiter  = options.delimiter  || prompt.delimiter;\n  prompt.colors     = options.colors     || prompt.colors;\n\n  if (process.platform !== 'win32') {\n    // windows falls apart trying to deal with SIGINT\n    process.on('SIGINT', function () {\n      stdout.write('\\n');\n      process.exit(1);\n    });\n  }\n\n  prompt.emit('start');\n  prompt.started = true;\n  prompt.stopped = false;\n  return prompt;\n};\n\n//\n// ### function pause ()\n// Pauses input coming in from stdin\n//\nprompt.pause = function () {\n  if (!prompt.started || prompt.stopped || prompt.paused) {\n    return;\n  }\n\n  stdin.pause();\n  prompt.emit('pause');\n  prompt.paused = true;\n  return prompt;\n};\n\n//\n// ### function stop ()\n// Stops input coming in from stdin\n//\nprompt.stop = function () {\n    if (prompt.stopped || !prompt.started) {\n        return;\n    }\n    \n    stdin.destroy();\n    prompt.emit('stop');\n    prompt.stopped = true;\n    prompt.started = false;\n    prompt.paused = false;\n    return prompt;\n}\n\n//\n// ### function resume ()\n// Resumes input coming in from stdin\n//\nprompt.resume = function () {\n  if (!prompt.started || !prompt.paused) {\n    return;\n  }\n\n  stdin.resume();\n  prompt.emit('resume');\n  prompt.paused = false;\n  return prompt;\n};\n\n//\n// ### function history (search)\n// #### @search {Number|string} Index or property name to find.\n// Returns the `property:value` pair from within the prompts\n// `history` array.\n//\nprompt.history = function (search) {\n  if (typeof search === 'number') {\n    return history[search] || {};\n  }\n\n  var names = history.map(function (pair) {\n    return typeof pair.property === 'string'\n      ? pair.property\n      : pair.property.name;\n  });\n\n  if (!~names.indexOf(search)) {\n    return null;\n  }\n\n  return history.filter(function (pair) {\n    return typeof pair.property === 'string'\n      ? pair.property === search\n      : pair.property.name === search;\n  })[0];\n};\n\n//\n// ### function get (schema, callback)\n// #### @schema {Array|Object|string} Set of variables to get input for.\n// #### @callback {function} Continuation to pass control to when complete.\n// Gets input from the user via stdin for the specified message(s) `msg`.\n//\nprompt.get = function (schema, callback) {\n  //\n  // Transforms a full JSON-schema into an array describing path and sub-schemas.\n  // Used for iteration purposes.\n  //\n  function untangle(schema, path) {\n    var results = [];\n    path = path || [];\n\n    if (schema.properties) {\n      //\n      // Iterate over the properties in the schema and use recursion\n      // to process sub-properties.\n      //\n      Object.keys(schema.properties).forEach(function (key) {\n        var obj = {};\n        obj[key] = schema.properties[key];\n\n        //\n        // Concat a sub-untangling to the results.\n        //\n        results = results.concat(untangle(obj[key], path.concat(key)));\n      });\n\n      // Return the results.\n      return results;\n    }\n\n    //\n    // This is a schema \"leaf\".\n    //\n    return {\n      path: path,\n      schema: schema\n    };\n  }\n\n  //\n  // Iterate over the values in the schema, represented as\n  // a legit single-property object subschemas. Accepts `schema`\n  // of the forms:\n  //\n  //    'prop-name'\n  //\n  //    ['string-name', { path: ['or-well-formed-subschema'], properties: ... }]\n  //\n  //    { path: ['or-well-formed-subschema'], properties: ... ] }\n  //\n  //    { properties: { 'schema-with-no-path' } }\n  //\n  // And transforms them all into\n  //\n  //    { path: ['path', 'to', 'property'], properties: { path: { to: ...} } }\n  //\n  function iterate(schema, get, done) {\n    var iterator = [],\n        result = {};\n\n    if (typeof schema === 'string') {\n      //\n      // We can iterate over a single string.\n      //\n      iterator.push({\n        path: [schema],\n        schema: prompt.properties[schema.toLowerCase()] || {}\n      });\n    }\n    else if (Array.isArray(schema)) {\n      //\n      // An array of strings and/or single-prop schema and/or no-prop schema.\n      //\n      iterator = schema.map(function (element) {\n        if (typeof element === 'string') {\n          return {\n            path: [element],\n            schema: prompt.properties[element.toLowerCase()] || {}\n          };\n        }\n        else if (element.properties) {\n          return {\n            path: [Object.keys(element.properties)[0]],\n            schema: element.properties[Object.keys(element.properties)[0]]\n          };\n        }\n        else if (element.path && element.schema) {\n          return element;\n        }\n        else {\n          return {\n            path: [element.name || 'question'],\n            schema: element\n          };\n        }\n      });\n    }\n    else if (schema.properties) {\n      //\n      // Or a complete schema `untangle` it for use.\n      //\n      iterator = untangle(schema);\n    }\n    else {\n      //\n      // Or a partial schema and path.\n      // TODO: Evaluate need for this option.\n      //\n      iterator = [{\n        schema: schema.schema ? schema.schema : schema,\n        path: schema.path || [schema.name || 'question']\n      }];\n    }\n\n    //\n    // Now, iterate and assemble the result.\n    //\n    async.forEachSeries(iterator, function (branch, next) {\n      get(branch, function assembler(err, line) {\n        if (err) {\n          return next(err);\n        }\n\n        function build(path, line) {\n          var obj = {};\n          if (path.length) {\n            obj[path[0]] = build(path.slice(1), line);\n            return obj;\n          }\n\n          return line;\n        }\n\n        function attach(obj, attr) {\n          var keys;\n          if (typeof attr !== 'object' || attr instanceof Array) {\n            return attr;\n          }\n\n          keys = Object.keys(attr);\n          if (keys.length) {\n            if (!obj[keys[0]]) {\n              obj[keys[0]] = {};\n            }\n            obj[keys[0]] = attach(obj[keys[0]], attr[keys[0]]);\n          }\n\n          return obj;\n        }\n\n        result = attach(result, build(branch.path, line));\n        next();\n      });\n    }, function (err) {\n      return err ? done(err) : done(null, result);\n    });\n  }\n\n  iterate(schema, function get(target, next) {\n    prompt.getInput(target, function (err, line) {\n      return err ? next(err) : next(null, line);\n    });\n  }, callback);\n\n  return prompt;\n};\n\n//\n// ### function confirm (msg, callback)\n// #### @msg {Array|Object|string} set of message to confirm\n// #### @callback {function} Continuation to pass control to when complete.\n// Confirms a single or series of messages by prompting the user for a Y/N response.\n// Returns `true` if ALL messages are answered in the affirmative, otherwise `false`\n//\n// `msg` can be a string, or object (or array of strings/objects).\n// An object may have the following properties:\n//\n//    {\n//      description: 'yes/no' // message to prompt user\n//      pattern: /^[yntf]{1}/i // optional - regex defining acceptable responses\n//      yes: /^[yt]{1}/i // optional - regex defining `affirmative` responses\n//      message: 'yes/no' // optional - message to display for invalid responses\n//    }\n//\nprompt.confirm = function (/* msg, options, callback */) {\n  var args     = Array.prototype.slice.call(arguments),\n      msg      = args.shift(),\n      callback = args.pop(),\n      opts     = args.shift(),\n      vars     = !Array.isArray(msg) ? [msg] : msg,\n      RX_Y     = /^[yt]{1}/i,\n      RX_YN    = /^[yntf]{1}/i;\n\n  function confirm(target, next) {\n    var yes = target.yes || RX_Y,\n      options = utile.mixin({\n        description: typeof target === 'string' ? target : target.description||'yes/no',\n        pattern: target.pattern || RX_YN,\n        name: 'confirm',\n        message: target.message || 'yes/no'\n      }, opts || {});\n\n\n    prompt.get([options], function (err, result) {\n      next(err ? false : yes.test(result[options.name]));\n    });\n  }\n\n  async.rejectSeries(vars, confirm, function(result) {\n    callback(null, result.length===0);\n  });\n};\n\n\n// Variables needed outside of getInput for multiline arrays.\nvar tmp = [];\n\n\n// ### function getInput (prop, callback)\n// #### @prop {Object|string} Variable to get input for.\n// #### @callback {function} Continuation to pass control to when complete.\n// Gets input from the user via stdin for the specified message `msg`.\n//\nprompt.getInput = function (prop, callback) {\n  var schema = prop.schema || prop,\n      propName = prop.path && prop.path.join(':') || prop,\n      storedSchema = prompt.properties[propName.toLowerCase()],\n      delim = prompt.delimiter,\n      defaultLine,\n      against,\n      hidden,\n      length,\n      valid,\n      name,\n      raw,\n      msg;\n\n  //\n  // If there is a stored schema for `propName` in `propmpt.properties`\n  // then use it.\n  //\n  if (schema instanceof Object && !Object.keys(schema).length &&\n    typeof storedSchema !== 'undefined') {\n    schema = storedSchema;\n  }\n\n  //\n  // Build a proper validation schema if we just have a string\n  // and no `storedSchema`.\n  //\n  if (typeof prop === 'string' && !storedSchema) {\n    schema = {};\n  }\n\n  schema = convert(schema);\n  defaultLine = schema.default;\n  name = prop.description || schema.description || propName;\n  raw = prompt.colors\n    ? [colors.grey(name), colors.grey(delim)]\n    : [name, delim];\n\n  if (prompt.message)\n    raw.unshift(prompt.message, delim);\n\n  prop = {\n    schema: schema,\n    path: propName.split(':')\n  };\n\n  //\n  // If the schema has no `properties` value then set\n  // it to an object containing the current schema\n  // for `propName`.\n  //\n  if (!schema.properties) {\n    schema = (function () {\n      var obj = { properties: {} };\n      obj.properties[propName] = schema;\n      return obj;\n    })();\n  }\n\n  //\n  // Handle overrides here.\n  // TODO: Make overrides nestable\n  //\n  if (prompt.override && prompt.override[propName]) {\n    if (prompt._performValidation(name, prop, prompt.override, schema, -1, callback)) {\n      return callback(null, prompt.override[propName]);\n    }\n\n    delete prompt.override[propName];\n  }\n\n  //\n  // Check if we should skip this prompt\n  //\n  if (typeof prop.schema.ask === 'function' &&\n    !prop.schema.ask()) {\n    return callback(null, prop.schema.default || '');\n  }\n\n  var type = (schema.properties && schema.properties[propName] &&\n              schema.properties[propName].type || '').toLowerCase().trim(),\n      wait = type === 'array';\n\n  if (type === 'array') {\n    length = prop.schema.maxItems;\n    if (length) {\n      msg = (tmp.length + 1).toString() + '/' + length.toString();\n    }\n    else {\n      msg = (tmp.length + 1).toString();\n    }\n    msg += delim;\n    raw.push(prompt.colors ? msg.grey : msg);\n  }\n\n  //\n  // Calculate the raw length and colorize the prompt\n  //\n  length = raw.join('').length;\n  raw[0] = raw[0];\n  msg = raw.join('');\n\n  if (schema.help) {\n    schema.help.forEach(function (line) {\n      logger.help(line);\n    });\n  }\n\n  //\n  // Emit a \"prompting\" event\n  //\n  prompt.emit('prompt', prop);\n\n  //\n  // If there is no default line, set it to an empty string\n  //\n  if(typeof defaultLine === 'undefined') {\n    defaultLine = '';\n  }\n\n  //\n  // set to string for readline ( will not accept Numbers )\n  //\n  defaultLine = defaultLine.toString();\n\n  //\n  // Make the actual read\n  //\n  read({\n    prompt: msg,\n    silent: prop.schema && prop.schema.hidden,\n    replace: prop.schema && prop.schema.replace,\n    default: defaultLine,\n    input: stdin,\n    output: stdout\n  }, function (err, line) {\n    if (err && wait === false) {\n      return callback(err);\n    }\n\n    var against = {},\n        numericInput,\n        isValid;\n\n    if (line !== '') {\n\n      if (schema.properties[propName]) {\n        var type = (schema.properties[propName].type || '').toLowerCase().trim() || undefined;\n\n        //\n        // If type is some sort of numeric create a Number object to pass to revalidator\n        //\n        if (type === 'number' || type === 'integer') {\n          line = Number(line);\n        }\n\n        //\n        // Attempt to parse input as a boolean if the schema expects a boolean\n        //\n        if (type == 'boolean') {\n          if(line.toLowerCase() === \"true\" || line.toLowerCase() === 't') {\n            line = true;\n          } else if(line.toLowerCase() === \"false\" || line.toLowerCase() === 'f') {\n            line = false;\n          }\n        }\n\n        //\n        // If the type is an array, wait for the end. Fixes #54\n        //\n        if (type == 'array') {\n          var length = prop.schema.maxItems;\n          if (err) {\n            if (err.message == 'canceled') {\n              wait = false;\n              stdout.write('\\n');\n            }\n          }\n          else {\n            if (length) {\n              if (tmp.length + 1 < length) {\n                isValid = false;\n                wait = true;\n              }\n              else {\n                isValid = true;\n                wait = false;\n              }\n            }\n            else {\n              isValid = false;\n              wait = true;\n            }\n            tmp.push(line);\n          }\n          line = tmp;\n        }\n      }\n\n      against[propName] = line;\n    }\n\n    if (prop && prop.schema.before) {\n      line = prop.schema.before(line);\n    }\n\n    // Validate\n    if (isValid === undefined) isValid = prompt._performValidation(name, prop, against, schema, line, callback);\n\n    if (!isValid) {\n      return prompt.getInput(prop, callback);\n    }\n\n    //\n    // Log the resulting line, append this `property:value`\n    // pair to the history for `prompt` and respond to\n    // the callback.\n    //\n    logger.input(line.yellow);\n    prompt._remember(propName, line);\n    callback(null, line);\n\n    // Make sure `tmp` is emptied\n    tmp = [];\n  });\n};\n\n//\n// ### function performValidation (name, prop, against, schema, line, callback)\n// #### @name {Object} Variable name\n// #### @prop {Object|string} Variable to get input for.\n// #### @against {Object} Input\n// #### @schema {Object} Validation schema\n// #### @line {String|Boolean} Input line\n// #### @callback {function} Continuation to pass control to when complete.\n// Perfoms user input validation, print errors if needed and returns value according to validation\n//\nprompt._performValidation = function (name, prop, against, schema, line, callback) {\n  var numericInput, valid, msg;\n  try {\n    valid = validate(against, schema);\n  }\n  catch (err) {\n    return (line !== -1) ? callback(err) : false;\n  }\n\n  if (!valid.valid) {\n    if (prop.schema.message) {\n      logger.error(prop.schema.message);\n    } else {\n      msg = line !== -1 ? 'Invalid input for ' : 'Invalid command-line input for ';\n\n      if (prompt.colors) {\n        logger.error(msg + name.grey);\n      }\n      else {\n        logger.error(msg + name);\n      }\n    }\n\n    prompt.emit('invalid', prop, line);\n  }\n\n  return valid.valid;\n};\n\n//\n// ### function addProperties (obj, properties, callback)\n// #### @obj {Object} Object to add properties to\n// #### @properties {Array} List of properties to get values for\n// #### @callback {function} Continuation to pass control to when complete.\n// Prompts the user for values each of the `properties` if `obj` does not already\n// have a value for the property. Responds with the modified object.\n//\nprompt.addProperties = function (obj, properties, callback) {\n  properties = properties.filter(function (prop) {\n    return typeof obj[prop] === 'undefined';\n  });\n\n  if (properties.length === 0) {\n    return callback(obj);\n  }\n\n  prompt.get(properties, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n    else if (!results) {\n      return callback(null, obj);\n    }\n\n    function putNested (obj, path, value) {\n      var last = obj, key;\n\n      while (path.length > 1) {\n        key = path.shift();\n        if (!last[key]) {\n          last[key] = {};\n        }\n\n        last = last[key];\n      }\n\n      last[path.shift()] = value;\n    }\n\n    Object.keys(results).forEach(function (key) {\n      putNested(obj, key.split('.'), results[key]);\n    });\n\n    callback(null, obj);\n  });\n\n  return prompt;\n};\n\n//\n// ### @private function _remember (property, value)\n// #### @property {Object|string} Property that the value is in response to.\n// #### @value {string} User input captured by `prompt`.\n// Prepends the `property:value` pair into the private `history` Array\n// for `prompt` so that it can be accessed later.\n//\nprompt._remember = function (property, value) {\n  history.unshift({\n    property: property,\n    value: value\n  });\n\n  //\n  // If the length of the `history` Array\n  // has exceeded the specified length to remember,\n  // `prompt.memory`, truncate it.\n  //\n  if (history.length > prompt.memory) {\n    history.splice(prompt.memory, history.length - prompt.memory);\n  }\n};\n\n//\n// ### @private function convert (schema)\n// #### @schema {Object} Schema for a property\n// Converts the schema into new format if it is in old format\n//\nfunction convert(schema) {\n  var newProps = Object.keys(validate.messages),\n      newSchema = false,\n      key;\n\n  newProps = newProps.concat(['description', 'dependencies']);\n\n  for (key in schema) {\n    if (newProps.indexOf(key) > 0) {\n      newSchema = true;\n      break;\n    }\n  }\n\n  if (!newSchema || schema.validator || schema.warning || typeof schema.empty !== 'undefined') {\n    schema.description = schema.message;\n    schema.message = schema.warning;\n\n    if (typeof schema.validator === 'function') {\n      schema.conform = schema.validator;\n    } else {\n      schema.pattern = schema.validator;\n    }\n\n    if (typeof schema.empty !== 'undefined') {\n      schema.required = !(schema.empty);\n    }\n\n    delete schema.warning;\n    delete schema.validator;\n    delete schema.empty;\n  }\n\n  return schema;\n}\n"}